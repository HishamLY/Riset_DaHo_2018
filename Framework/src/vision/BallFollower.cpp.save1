/*
 *   BallFollower.cpp
 *
 *   Author: ROBOTIS
 *
 */

#include <stdio.h>
#include "ImgProcess.h"
#include "MX28.h"
#include "Head.h"
#include "Action.h"
#include "Walking.h"
#include "BallFollower.h"
#include "MotionStatus.h"
#include "Behavior.h"
#include "StatusCheck.h"
#include "Vector2.h"
#include <math.h>

#define PI (3.14159265)


using namespace Robot;

extern int countHeadSearchingCycle;
extern double panLastSeenPost;
int RandomKick = 0;
static const double TiltCheckPost = 27.5;//dipake di processLocalizeGoalPost
int flag = 0;
bool FirstTouch = false;

BallFollower::BallFollower()
{

	CmpsSPTurn = 0;
	CmpsErrTurn = 0;

	MaxBallTurn = 0; //dipake turning ball
	CountMaxTurnBall = 0; //dipake truning ball

	PostEqualZero = true;
	flagNemuBola = false;
	flagUdahMuter = false;
	turn = false;
	Goback = true;
	CountFirstTilt = 0; //dipake pas processaproachingball
	MaxCountFirstTilt = 10;

	m_NoBallMaxCount = 10;
	m_NoBallCount = 0;
	m_KickBallMaxCount = 10;
	m_KickBallCount = 0;
	m_CountBallFound = 0;
	m_MaxCountBallFound = 10;

	panLastSeenBall = 10;
	tiltLastSeenBall = 40;
	LostCounter = 0;

	MaxLostCounter = 5;
	m_KickTopAngle = 0.0;//-3.0;//40
	m_KickRightAngle = -25.0;
	m_KickLeftAngle = 25.0;

	m_FollowMaxFBStep = 45.0;	//55.0 //Nilai max yang mungkin tercapai
 	m_FollowMinFBStep = 10.0;	//awalnya 5.0
	m_FollowMaxRLTurn = 30.0;
	m_FitFBStep = 3.0;
	m_FitMaxRLTurn = 35.0;
	m_UnitFBStep = 2.0;	//1.5	//Increment
	m_UnitRLTurn = 5.0;	//3.0
	m_UnitRLStep = 3;

	m_GoalFBStep = 0; //Pengganti X Moved
	m_GoalRLTurn = 0; //Pengganti A Moved
	m_GoalRLStep = 0; //Pengganti Y Moved
	m_FBStep = 0;
	m_RLTurn = 0;
	m_RLStep = 0;

	MaxBallTurn = 0;
	FirstTilt = false;
	TiltAngle = 0;
	PanAngle = 0;
	Sizeball = 0;
	DEBUG_PRINT = false;
	KickDir = 3;//netral
	KickBall = 0;
	X_Moved = 0;
	Y_Moved = 0;
	A_Moved = 0;
	countCheckBall = 0;
	counterGetBall = 0;

	//SWITCH RESOLUSI
	CountBingung = 0; //counter buat udah switching tiga kali
	onesegitiga = 0;//ini variabel buat nentuin apakah  daritem udah bikin 1 segitiga

	//TURNING BALL BARU
	TurningAngleThreshold = 55; //batas sudut untuk make new turning angle
	PanAngleThreshold = 20;
	TiltAngleThreshold = 20;
}

BallFollower::~BallFollower()
{
}

void BallFollower::ProcessFirstPenaltySearching(Point2D ball_pos)
{
    if(ball_pos.X == -1.0 || ball_pos.Y == -1.0)
    {
		if(m_NoBallCount > m_NoBallMaxCount && countHeadSearchingCycle > 2)
		{
			m_GoalFBStep = 20;
			m_GoalRLTurn = 0;
		}
		else
		{
			m_GoalFBStep = 0;
			m_GoalRLTurn = 0;

			m_NoBallCount++;
		}
    }
    else
    {
		m_NoBallCount = 0;

		double pan = MotionStatus::m_CurrentJoints.GetAngle(JointData::ID_HEAD_PAN);
		double pan_range = Head::GetInstance()->GetLeftLimitAngle();
		double pan_percent = pan / pan_range;

		double tilt = MotionStatus::m_CurrentJoints.GetAngle(JointData::ID_HEAD_TILT);
		double tilt_min = Head::GetInstance()->GetBottomLimitAngle();
		double tilt_range = Head::GetInstance()->GetTopLimitAngle() - tilt_min;
		double tilt_percent = (tilt - tilt_min) / tilt_range;
		if(tilt_percent < 0)
			tilt_percent = -tilt_percent;

		if(pan > m_KickRightAngle && pan < m_KickLeftAngle) //KALO BOLA BERADA DI TENGAH PAN
		{
			if(tilt <= (tilt_min + MX28::RATIO_VALUE2ANGLE + 10))
			{
				if(ball_pos.Y < m_KickTopAngle + 10) //SUDAH DEKET DENGAN BOLA
				{
					m_GoalFBStep = 0;
					m_GoalRLTurn = 0;

					if(m_KickBallCount >= m_KickBallMaxCount) //KALO SUDAH BERADA DI DEKET BOLA, CARI GAWANG
					{
						m_FBStep = 0;
						m_RLTurn = 0;
						Behavior::GetInstance()->set_check_post_position();

						//Head::GetInstance()->LookUp();
						Head::GetInstance()->MoveByAngle(0, 40);
						Walking::GetInstance()->X_MOVE_AMPLITUDE = 0;
						Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;
						Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;
					}
					else //KALO BELUM SIAP UNTUK TENDANG
					{
						m_KickBallCount++;
					}
				}
				else //BELUM DEKET
				{
					m_KickBallCount = 0;
					m_GoalFBStep = m_FitFBStep;
					m_GoalRLTurn = m_FitMaxRLTurn * pan_percent;
				}
			}
			else
			{
				m_KickBallCount = 0;
				m_GoalFBStep = m_FollowMaxFBStep * tilt_percent;
				if(m_GoalFBStep < m_FollowMinFBStep)
				    m_GoalFBStep = m_FollowMinFBStep;
				m_GoalRLTurn = m_FollowMaxRLTurn * pan_percent;
			}
		}
		else //MASIH JAUH
		{
			m_KickBallCount = 0;
			m_GoalFBStep = 0;
			m_GoalRLTurn = m_FollowMaxRLTurn * pan_percent;
		}
	}

	if(m_GoalFBStep == 0 && m_GoalRLTurn == 0 && m_FBStep == 0 && m_RLTurn == 0)
	{
//		if(m_KickBallCount < m_KickBallMaxCount)
//			m_KickBallCount++;
	}
	else
	{
		if(Walking::GetInstance()->IsRunning() == false)
		{
			m_FBStep = 0;
			m_RLTurn = 0;
			m_KickBallCount = 0;
			Walking::GetInstance()->X_MOVE_AMPLITUDE = m_FBStep;
			Walking::GetInstance()->Y_MOVE_AMPLITUDE = m_RLTurn;
			Walking::GetInstance()->Start();
		}
		else
		{
			if(m_FBStep < m_GoalFBStep)
				m_FBStep += m_UnitFBStep;
			else if(m_FBStep > m_GoalFBStep)
				m_FBStep = m_GoalFBStep;
			Walking::GetInstance()->X_MOVE_AMPLITUDE = m_FBStep;

	if(m_RLTurn > 0 && m_GoalRLTurn < 0)
		m_RLTurn = 0;
	else if(m_RLTurn < 0 && m_GoalRLTurn > 0)
		m_RLTurn = 0;

			if(m_RLTurn < m_GoalRLTurn)
				m_RLTurn += m_UnitRLTurn;
			else if(m_RLTurn > m_GoalRLTurn)
				m_RLTurn -= m_UnitRLTurn;
			Walking::GetInstance()->A_MOVE_AMPLITUDE = m_RLTurn;
		}
	}
}

void BallFollower::ProcessSearchingBall()
{
	Walking::GetInstance()->Start();
	double pan = MotionStatus::m_CurrentJoints.GetAngle(JointData::ID_HEAD_PAN);
	double tilt = MotionStatus::m_CurrentJoints.GetAngle(JointData::ID_HEAD_TILT);

	if(Behavior::GetInstance()->get_state() == NORMAL_STATE
		|| Behavior::GetInstance()->get_state() == DEFENSE_STATE
		|| Behavior::GetInstance()->get_state() == GOBACK_STATE)
	{

		if(EdgeOfField)
		{
			if(TurnDirection == KANAN)
			{
				panLastSeenBall = 1.0f;//diset agar nanti muternya jadi berubah arah kalo udah ketemu pinggir lapangan
				m_GoalRLTurn = 20;
				m_GoalRLStep = 0;
				m_GoalFBStep = 0;
			}
			else if(TurnDirection == KIRI)
			{
				panLastSeenBall = -1.0f;
				m_GoalRLTurn = -20;
				m_GoalRLStep = 0;
				m_GoalFBStep = 0;
			}
		}
		else
		{
			printf("CARI BOLA -----------\n");
			CountFirstTilt=0;

			if(KickDir == -1)
			{
				if(A_Moved > 90)
					KickDir = 0;
				else
				{
					m_GoalFBStep = 0;
					m_GoalRLTurn = 20;
				}
			}
			else if(KickDir == 1)
			{
				if(A_Moved < -90)
					KickDir = 0;
				else
				{
					m_GoalFBStep = 0;
					m_GoalRLTurn = -20;
				}
			}
			else if(KickDir == 0)
			{
				if(X_Moved > 1000)//(tiltLastSeenBall - Head::GetInstance()->GetBottomLimitAngle()) * 8 )//75 adalah konstanta
				{
					printf("\t\t\t\tMAJU 1 METER BRO................\n");
					KickDir = 3;
					CountMaxTurnBall = 0;
					turn = true;
				}
				else
				{
					m_GoalFBStep = 20;
					m_GoalRLTurn = 0;
				}
			}
			else if(KickDir == 2)
			{
				if(abs(A_Moved) < panLastSeenBall)
				{
					m_GoalFBStep = 0;
					m_GoalRLStep = 0;
					m_GoalRLTurn = panLastSeenBall;
 	       if(abs(m_GoalRLTurn) > 20)
  	        m_GoalRLTurn = panLastSeenBall * 20 /abs(panLastSeenBall);
				}
				else if (X_Moved < (tiltLastSeenBall - Head::GetInstance()->GetBottomLimitAngle()) * 8)
				{
					printf("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n");
				  m_GoalFBStep = 20;
				  m_GoalRLStep = 0;
				  m_GoalRLTurn = 0;
				}
				else if(X_Moved >= (tiltLastSeenBall - Head::GetInstance()->GetBottomLimitAngle()) * 8)
				{
				  printf("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n");
				  turn = true;
					CountMaxTurnBall = 0;
					KickDir = 3;
				}
			}
			else
			{
				if(turn)
				{
					MaxBallTurn = 180;
					if(abs(CountMaxTurnBall) < MaxBallTurn)
						{
						printf("tuuuuuuuuuuuuuuuuuuuurrrrrrrrrrrrrrrrrnnnnnnnnnnnnnnnn\n");
						m_GoalFBStep = 0;
						m_GoalRLStep = 0;
						m_GoalRLTurn = panLastSeenBall * 20 / abs(panLastSeenBall);
						CountMaxTurnBall += Walking::GetInstance()->Get_A_Moved() * 180 /PI;
					}
					else
					{
						printf("\t\t\t\t\t\t\t teeeeeeeeees\n");
						MaxBallTurn = 0;
						CountMaxTurnBall = 0;
						turn = false;
					}
				}
				else
				{
					turn = false;
   	 			if( countHeadSearchingCycle > 6)// kalo 3 cycle sekitaran 7 detik
	   			{
		   			m_GoalFBStep = 0;
						if(panLastSeenBall < 0)
//	        if(Head::GetInstance()->CheckLastPanAngle() == RIGHT)
	        	{
    	    	   	m_GoalRLTurn = -20;
       			}
						else if(panLastSeenBall > 0)
//	      	 	else if(Head::GetInstance()->CheckLastPanAngle() == LEFT)
         		{
      	  	   	m_GoalRLTurn = 20;
        		}
						else
         		{
							X_Moved = 0;
							m_NoBallCount = 0;
							countHeadSearchingCycle = 0;
						}

						if(abs(A_Moved) > 120)
						{
							X_Moved = 0;
							A_Moved = 0;
							m_NoBallCount = 0;
			     		m_RLTurn = 0;
			     		m_GoalRLTurn = 0;
							countHeadSearchingCycle = 0;
							onesegitiga++;
							printf("\t\t\t\t\t\=====================SEKARANG UDAH SISI KE : %i\n\n\n\n",onesegitiga);
							if(onesegitiga==1) {
									Behavior::GetInstance()->Bingung = true;
									onesegitiga = 0;
							}
						}
  	     	}
  	    	else   //MAJU SEKARANG
  	     	{
						A_Moved = 0;
		        m_NoBallCount++;
		        m_GoalFBStep = 20;
		     		m_GoalRLTurn = 0;
					}
				}
			}

			if(m_GoalRLTurn < 0)
				TurnDirection = KANAN;
			else
				TurnDirection = KIRI;
		}
		// Kondisi biar masuk ke lokalisasi kasar
		//Behavior::GetInstance()->Bingung = true;

	}
	else if(Behavior::GetInstance()->get_state() == TURN_AROUND_BALL_STATE ||
		Behavior::GetInstance()->get_state() == APROACHING_BALL)
	{
		printf("BOLA HILANG\n");
		if(m_NoBallCount < 3)//untuk mengnolkan  X_Moved 
		{
			X_Moved = Walking::GetInstance()->Get_X_Moved();
			X_Moved = 0;
		}
		else
		{
			m_GoalFBStep = 0;
			m_GoalRLTurn = 0;
			m_GoalRLStep = 0;
			Walking::GetInstance()->X_MOVE_AMPLITUDE = -10;//diubah
			Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;
			if(panLastSeenBall < -5)
				Walking::GetInstance()->Y_MOVE_AMPLITUDE = 10;
			else if(panLastSeenBall > 5)
				Walking::GetInstance()->Y_MOVE_AMPLITUDE = -10;

			X_Moved += Walking::GetInstance()->Get_X_Moved();
			if(X_Moved < -500)
			{
//				if(Behavior::GetInstance()->get_state() == TURN_AROUND_BALL_STATE )
//				{
					Behavior::GetInstance()->set_normal_state();
					m_NoBallCount = 0;
					X_Moved = 0;
					KickDir = 2;
					turn = true;
			}
		}
		m_NoBallCount++;
	}
	else if(Behavior::GetInstance()->get_state() == KICK_STATE)
	{
		printf("BOLA HILANG\n");
		if(m_NoBallCount < 3)//untuk mengnolkan  X_Moved 
		{
			X_Moved = Walking::GetInstance()->Get_X_Moved();
			X_Moved = 0;
		}
		else
		{
			m_GoalFBStep = 0;
			m_GoalRLTurn = 0;
			m_GoalRLStep = 0;
			Walking::GetInstance()->X_MOVE_AMPLITUDE = -10;//diubah
			Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;
			if(panLastSeenBall < -5)
				Walking::GetInstance()->Y_MOVE_AMPLITUDE = 10;
			else if(panLastSeenBall > 5)
				Walking::GetInstance()->Y_MOVE_AMPLITUDE = -10;

			X_Moved += Walking::GetInstance()->Get_X_Moved();
			if(X_Moved < -100)
			{
				if(StatusCheck::m_cur_mode == SOCCER_YELLOW_POST
				|| StatusCheck::m_cur_mode == SOCCER_BLUE_POST
				|| StatusCheck::m_cur_mode == GAME_CONTROLLER)
				{
					Behavior::GetInstance()->set_normal_state();
					Walking::GetInstance()->A_MOVE_AIM_ON = false;
					Walking::GetInstance()->m_Joint.SetEnableBodyWithoutHead(true, true);
					X_Moved = 0;
				}
			}
		}
		m_NoBallCount++;
	}


}

void BallFollower::ProcessCariBola(Point2D ball_pos, bool *IsOneCycle, Vector2<int> Jarak)
{
  double pan = MotionStatus::m_CurrentJoints.GetAngle(JointData::ID_HEAD_PAN);
  double pan_range = Head::GetInstance()->GetLeftLimitAngle();
  double pan_percent = pan / pan_range;
	if((ball_pos.X  == -1.0 || ball_pos.Y == -1.0) && flagNemuBola == false)
	{
		printf("\t\t\t\t\t\ bingungggggggggggggggggggg\n");
		if(*IsOneCycle == true)
		{
			X_Moved = 0;
			Y_Moved = 0;

			if(Walking::GetInstance()->IsRunning() == false)
			{
				Walking::GetInstance()->Start();
			}
			if(abs(A_Moved) < 120) //Awalnya dari pake ketu 180
			{
				m_GoalFBStep = 0;
				m_GoalRLStep = 0;
				m_GoalRLTurn = 30;
			}
			else
			{
				*IsOneCycle = false;
				A_Moved = 0;
				CountBingung++;
			}
		}
		else
		{
			m_GoalFBStep = 0;
			m_GoalRLStep = 0;
			m_GoalRLTurn = 0;
			A_Moved = 0;
			if(Walking::GetInstance()->IsRunning() == true)
			{
				Walking::GetInstance()->Stop();
			}
		}
	}

	else
	{
		flagNemuBola = true;
		panLastSeenBall = pan + ball_pos.X;
		tiltLastSeenBall = Jarak.x;
			if(Walking::GetInstance()->IsRunning() == false)
			{
				Walking::GetInstance()->Start();
			}
		if(fabs(A_Moved) < fabs(panLastSeenBall)+5 && flagUdahMuter == false) //Muter sebesar PanLastSeenBall selama A/Moved  kurang dari pan last seen Ball
		{
				printf("\t\t\t\t\t\ muteeeee broooo\n");

			m_GoalFBStep = 0;
			m_GoalRLTurn = panLastSeenBall;
			m_GoalRLStep = 0;
		}
		else
		{
			flagUdahMuter = true;
			if(X_Moved < 100)//100
			{
				printf("\t\t\t\t\t\t\ maju brooo\n");
				m_GoalFBStep = 15; //awalnya dari pak ketu 20 
				m_GoalRLTurn = 0;
				m_GoalRLStep = 0;
				panLastSeenBall = 0;
			}
			else if(X_Moved >= 100 || CountBingung >= 5)
			{
				printf("t\t\t\t\t\t\t\ disini aja\n");
				flagUdahMuter = false;
				flagNemuBola = false;
				CountBingung = 0;
				Behavior::GetInstance()->flagLagiSwitch = true;
				//Biar sewaktu switch resolusi diam dulu
				if(Walking::GetInstance()->IsRunning() == true)
				{
					Walking::GetInstance()->Stop();
				}
				Behavior::GetInstance()->Bingung = false;
				//Behavior::GetInstance()->set_normal_state();
				Behavior::GetInstance()->set_switching_transition();
/*
				A_Moved = 0;
				X_Moved = 0;
*/
			}
		}
	}

	if(CountBingung >= 4) {
			flagNemuBola = true;
	}

		X_Moved += Walking::GetInstance()->Get_X_Moved();
		A_Moved += Walking::GetInstance()->Get_A_Moved() * 180 /PI;
		Y_Moved += Walking::GetInstance()->Get_Y_Moved();

	if(m_FBStep < m_GoalFBStep)
		m_FBStep += m_UnitFBStep;
	else if(m_FBStep >= m_GoalFBStep)
		m_FBStep -= m_UnitFBStep;
	Walking::GetInstance()->X_MOVE_AMPLITUDE = m_FBStep;

	if(m_RLTurn > 0 && m_GoalRLTurn < 0)
		m_RLTurn = 0;
	else if(m_RLTurn < 0 && m_GoalRLTurn > 0)
		m_RLTurn = 0;

	if(m_RLTurn < m_GoalRLTurn)
		m_RLTurn += m_UnitRLTurn;
	else if(m_RLTurn > m_GoalRLTurn)
		m_RLTurn -= m_UnitRLTurn;

	if(m_RLTurn > m_FollowMaxRLTurn)
		m_RLTurn = m_FollowMaxRLTurn;
	else if(m_RLTurn < -m_FollowMaxRLTurn)
		m_RLTurn = -m_FollowMaxRLTurn;

	Walking::GetInstance()->A_MOVE_AMPLITUDE = m_RLTurn;
 	Walking::GetInstance()->Y_MOVE_AMPLITUDE = m_RLStep;
}

void BallFollower::ProcessTurnAroundBall(Point2D ball_pos, double PanPost, int CompassError, int PostPosition)
{
	//sebelumnya variabel A-Moved dan CountMaxTurnBall telah di nolkan di state AproachingBall2
	printf("MaxBallTurn = %lf \n", MaxBallTurn);
	printf("COunt = %lf \n", CountMaxTurnBall);
	double TurningAngle = 500;//mula2 dibuah besar agar ga langsung pindah state
	//double TurningAngleThreshold =20;
	double pan = MotionStatus::m_CurrentJoints.GetAngle(JointData::ID_HEAD_PAN);
	double pan_range = Head::GetInstance()->GetLeftLimitAngle();
	double pan_percent = pan / pan_range;
  	if (pan_percent < 0)
	  pan_percent = -pan_percent;

	double tilt = MotionStatus::m_CurrentJoints.GetAngle(JointData::ID_HEAD_TILT);
	double tilt_min = Head::GetInstance()->GetBottomLimitAngle();
	double tilt_range = Head::GetInstance()->GetTopLimitAngle() - tilt_min;
	double tilt_percent = (tilt - tilt_min) / tilt_range;

 	if(tilt_percent < 0)
  	tilt_percent = -tilt_percent;

	if(Walking::GetInstance()->A_MOVE_AIM_ON = true)
		Walking::GetInstance()->A_MOVE_AIM_ON = false;

	if(ball_pos.X == -1.0 || ball_pos.Y == -1.0)//kalo ga ketemu
	{
		if(LostCounter > MaxLostCounter)
		{
			ProcessSearchingBall();
		}
		else
		{
			A_Moved = 0;
			X_Moved = 0;
			LostCounter++;
		}
	}
	else
	{
		LostCounter= 0;
		panLastSeenBall = pan + ball_pos.X;//ini di assign setelah diassign di aproachingball1
		tiltLastSeenBall = tilt + ball_pos.Y;
		tilt_percent = (tiltLastSeenBall - tilt_min) / tilt_range;

		if(abs(panLastSeenBall) > 90)
			panLastSeenBall *= 180 /abs(panLastSeenBall); //ubah ke derajat?, atau untuk apa

		MaxBallTurn = PanPost;// + A_Moved * 3/4; //sudut maksimum untuk muter
		TurningAngle = MaxBallTurn + (CompassError * 360/255);//konstata putar; sudut putar - (sudut saat ini - sudut setpoint)
		printf("turning angle = %lf\n", TurningAngle);
		printf("A_Moved = %lf\n", A_Moved);
		if(tilt >= tilt_min + 70) //Bola masih jauh di depan //70
		{
			printf("\t\t\tBOLA JAUH BANGET_ATAS, MAJU 20 DAN MUTER\n");
			m_GoalFBStep = 20; //maju
			m_GoalRLTurn = m_FollowMaxRLTurn * pan_percent; //muter
			m_GoalRLStep = 0;
			//Behavior::GetInstance()->set_normal_state();
		}
		else if((tilt >= tilt_min + 40) && (tilt < tilt_min + 70)) //kalo bolanya jauh//DIUBAH tambahin else, awalnya if doang 30-50
    		{
    			if(ball_pos.Y > m_KickTopAngle + 10)//kalo posisi Y bola jauh, ditambah tiltnya jauh
      			{
      				printf("\t\t\tBOLA JAUH AJA_BAWAH MAJU 20 DAN MUTER\n");
        			m_GoalFBStep = 20;
        			m_GoalRLTurn = m_FollowMaxRLTurn * pan_percent;
        			m_GoalRLStep = 0;
        			//Behavior::GetInstance()->set_aproaching_ball();
      			}
      			else    //tiltnya jauh, tapi posisinya di kamera lumayan di bawah, ga ganti state
      			{
        			printf("\t\t\tBOLA JAUH_ATAS, MAJU 10 DAN MUTER\n");
        			m_GoalFBStep = 10;
        			m_GoalRLTurn = m_FollowMaxRLTurn * pan_percent;
        			m_GoalRLStep = 0;
      			}
    		}
    		else if(tilt > tilt_min+20 && tilt < tilt_min+40) //DIUBAH//kalo bolanya berada agak ke depan 20-30
    {
	    if(ball_pos.Y < m_KickTopAngle + 10)
      {
  	    printf("\t\t\tBOLA JAUH_BAWAH, MAJU 10 DAN MUTER\n");
        m_GoalFBStep = 10;
        m_GoalRLTurn = m_FollowMaxRLTurn * pan_percent;
    	  m_GoalRLStep = 0;
      }
      else
      {
        printf("\t\t\tBOLA JAUH_ATAS, MAJU 5 DAN MUTER\n");
        m_GoalFBStep = 5;
        m_GoalRLTurn = m_FollowMaxRLTurn * pan_percent;
      	m_GoalRLStep = 0;
      }
    }

		else //kalo bolanya udah deket
		{
			m_NoBallCount = 0;
			//################### PENENTUAN BESARAN UNTUK TURNING BALL (MAXBALLTURN) #########################
			//================= EOF BOLA DEKET========================================
			printf("MaxBallTurn = %lf \n", MaxBallTurn);
			//################## proses turning ball ############################3
				//============================== EOF TAMBAHAN PAK KETU =========================
				if(abs(pan) <= 20) //kalo bolanya berada lurus di depan
				{
					printf("\t\t\tBola Lurus di depan\n");
					//if ((MaxBallTurn < 0))// && (MaxBallTurn < CountMaxTurnBall))

					if(abs(TurningAngle) < 5)//sudut putarnya udah kecil
					{
						Walking::GetInstance()->A_MOVE_AIM_ON = false;
						m_GoalFBStep = -2; //-(pan_percent * 30); //0
						m_GoalRLStep = -20; //0
						m_GoalRLTurn = 5;
					}

					else if(TurningAngle < 0)
					{
						m_GoalFBStep = -5; //-(pan_percent * 30); //awalnya 0
						m_GoalRLStep = -30; //awalnya 33 //awal 40
						m_GoalRLTurn = 20; //awalnya -10
						Walking::GetInstance()->A_MOVE_AIM_ON = false;
					}
					else if(TurningAngle > 0)
					{
						Walking::GetInstance()->A_MOVE_AIM_ON = false;
						m_GoalFBStep = -5; //-(pan_percent * 30); //awalnya 0
						m_GoalRLStep = 30; //awalnya -30	//awalnya -40
						m_GoalRLTurn = -10;	//awalnya -20
					}

					else
					{
						m_GoalFBStep = 0.0;
						m_GoalRLStep = 0.0;
						m_GoalRLTurn = 0.0;
						Walking::GetInstance()->A_MOVE_AIM_ON = false;
					}

				}

				if((abs(pan) > 20)) //kalo bolanya ada di samping
				{
					printf("\t\t\tBola di samping\n");
					if(abs(pan) > 45)//kalo bola disamping banget, maka mundur//DIUBAH 210414
					{
						m_GoalFBStep = -2; //awalnya -5
						if(pan < 0)//diubah 210414
							m_GoalRLTurn = -20;
						else
							m_GoalRLTurn = 20;
						m_GoalRLStep = 0;
					}
					else
					{
						m_GoalFBStep = -5;
						if (pan < 0)
							m_GoalRLStep = -20;
						else
							m_GoalRLStep = 20;
						m_GoalRLTurn = 0;
					}
				}
			}//Kurung Turning Angle Threshold
/*
			}
			else {
				//Kalau terlalu dekat bola, mundur
				printf("\t\t\tTerlalu dekat, mundur\n");
				m_GoalFBStep = -10;
				m_GoalRLStep = 0; //awalnya 33
				m_GoalRLTurn = 0; //awalnya -10
			}
*/
		}
		//=====================================================================
		//################# debugging #################
		printf("pan_percent %lf \n", pan_percent);
		printf("Error = %d \n", CompassError);
		printf("FBStep %lf \n", m_GoalFBStep);
		//==============================================

		if(abs(TurningAngle) < 10 || PostPosition == 1)//awalnya 3 derajat sebagai error untuk kelurusan
		{
			Behavior::GetInstance()->set_kick_state();
			CountMaxTurnBall = 0;
			MaxBallTurn = 0;
			X_Moved = 0;
			Y_Moved = 0;
			A_Moved = 0;
			KickBall = 0;
			KickDir = 0;

			if(PostPosition == 0 && PostEqualZero == true)// || PostPosition == -2)//kalo ga nemu gawang, maka setelah turning ball akan ngecek gawang lagi
			//if(PanPost == 0)//kalo ga nemu gawang, maka setelah turning ball akan ngecek gawang lagi
			{
				Behavior::GetInstance()->set_check_post_position();
				//Walking::GetInstance()->Stop();
				BallDistance = 0;
				PostEqualZero = false;
				//balldistance dibuat kecil artinya X_Moved akan selalu lebih besar dari balldistance
				//sehingga robot akan berhenti pas checkpost
			}
			return;
		}

		X_Moved += Walking::GetInstance()->Get_X_Moved();
		A_Moved += Walking::GetInstance()->Get_A_Moved() * 180 /PI;
		Y_Moved += Walking::GetInstance()->Get_Y_Moved();

	if(m_FBStep < m_GoalFBStep)
		m_FBStep += m_UnitFBStep;
	else if(m_FBStep >= m_GoalFBStep)
		m_FBStep -= m_UnitFBStep;
	Walking::GetInstance()->X_MOVE_AMPLITUDE = m_FBStep;

	if(m_RLTurn > 0 && m_GoalRLTurn < 0)
		m_RLTurn = 0;
	else if(m_RLTurn < 0 && m_GoalRLTurn > 0)
		m_RLTurn = 0;

	if(m_RLTurn < m_GoalRLTurn)
		m_RLTurn += m_UnitRLTurn;
	else if(m_RLTurn > m_GoalRLTurn)
		m_RLTurn -= m_UnitRLTurn;

	if(m_RLTurn > m_FollowMaxRLTurn)
		m_RLTurn = m_FollowMaxRLTurn;
	else if(m_RLTurn < -m_FollowMaxRLTurn)
		m_RLTurn = -m_FollowMaxRLTurn;

	Walking::GetInstance()->A_MOVE_AMPLITUDE = m_RLTurn;
 	Walking::GetInstance()->Y_MOVE_AMPLITUDE = m_GoalRLStep;
	//============= EOF BALL FOUND ==========================
}

void BallFollower::ProcessDefense(Point2D ball_pos, Vector2<int> ppfBall)//DIUBAH
{
	printf("DEFENSE STATE \n");
	if(ball_pos.X == -1.0 || ball_pos.Y == -1.0)//asumsi teman masih berkutat dengan bola
	{
		if(LostCounter > MaxLostCounter)
		{
			Walking::GetInstance()->Start();
			//dikomen...
		/*	if(BallDistance == 8)//udah deket ke bola
			{
				if(panLastSeenBall < 0) //bola berada di kanan
				{
					m_GoalFBStep = 0;
					m_GoalRLStep = 20;
					m_GoalRLTurn = 0;	
				}	
				else
				{
					m_GoalFBStep = 0;
					m_GoalRLStep = -20;
					m_GoalRLTurn = 0;	
				}
			}
			else*/
				ProcessSearchingBall();
		}
		else
		{
			LostCounter++;
			X_Moved = 0;
			A_Moved = 0;
		}
	}
	else
	{
		LostCounter = 0;
		CountMaxTurnBall = 0;
		MaxBallTurn = 0;
		//biar pas searchingball, langsung masuk ke yang cari bola.
		KickDir = 2;
 		m_NoBallCount = m_NoBallMaxCount + 25;
		countHeadSearchingCycle = 0;
		turn = false;
    double pan = MotionStatus::m_CurrentJoints.GetAngle(JointData::ID_HEAD_PAN);
    double pan_range = Head::GetInstance()->GetLeftLimitAngle();
    double pan_percent = pan / pan_range;

    double tilt = MotionStatus::m_CurrentJoints.GetAngle(JointData::ID_HEAD_TILT);
    double tilt_min = Head::GetInstance()->GetBottomLimitAngle();
    double tilt_range = Head::GetInstance()->GetTopLimitAngle() - tilt_min;
    double tilt_percent = (tilt - tilt_min) / tilt_range;
		if(tilt_percent < 0)
	    tilt_percent = -tilt_percent;
		printf("tilt = %lf \n", tilt);
		printf("pan = %lf \n", pan);

		tiltLastSeenBall = tilt + ball_pos.Y;
		panLastSeenBall = pan + ball_pos.X;
		if(abs(panLastSeenBall) > 90)
			panLastSeenBall *= 180 /abs(panLastSeenBall);

		if(abs(pan) > 35)//kalo range pan terlalu gedhe, asumsi bolanya deket ato jauh
		{
			if(Walking::GetInstance()->IsRunning() ==  0)
				Walking::GetInstance()->Start();
			printf("pan kurang\n");
			m_GoalFBStep = 0;
	    m_GoalRLTurn = (m_FollowMaxRLTurn * pan_percent);
		}
		else if(ppfBall.x < 1000)//kalo jaraknya udah deket sama bola, mundur dikit lah...
		{
			if(Walking::GetInstance()->IsRunning() ==  0)
				Walking::GetInstance()->Start();
			printf("mundur gannn\n");
			panLastSeenBall = pan;
			tiltLastSeenBall = tilt;
			BallDistance	= 8;		
			m_GoalFBStep = -10;
			m_GoalRLTurn = 0;
		}
		else if (abs(pan) > 10)//asumsi jarak udah lebih dari 1000, trus mgepasin ke bola
    {
			printf("pan kurang\n");
			if(Walking::GetInstance()->IsRunning() ==  0)
				Walking::GetInstance()->Start();
			m_GoalFBStep = 0;
      m_GoalRLTurn = (m_FollowMaxRLTurn * pan_percent);
		}
		else if(ppfBall.x >= 1500) //Bola masih cukup jauh atau bola berada di kiri atau di kanan
		{
			printf("masih jauh\n");
			if(Walking::GetInstance()->IsRunning() ==  0)
				Walking::GetInstance()->Start();
			BallDistance = 1;
			m_KickBallCount = 0;
			m_CountBallFound = 0;
      m_GoalFBStep = m_FollowMaxFBStep * tilt_percent - (pan_percent * 40.0);
      if(m_GoalFBStep < m_FollowMinFBStep)
      	m_GoalFBStep = m_FollowMinFBStep;
      m_GoalRLTurn = m_FollowMaxRLTurn * pan_percent;
			A_Moved = 0;
		}
		else
		{
			printf("setoppppp\n");
				panLastSeenBall = pan;
				tiltLastSeenBall = tilt;
				BallDistance	= 8;		
				m_GoalFBStep = 0;
				m_GoalRLTurn = 0;
				if(Walking::GetInstance()->IsRunning() == 1)
					Walking::GetInstance()->Stop();
		}
	}

	Walking::GetInstance()->A_MOVE_AIM_ON = false;

	//process untuk memberikan parameter jalan
	if(m_FBStep < m_GoalFBStep)
		m_FBStep += m_UnitFBStep;
	else if(m_FBStep >= m_GoalFBStep)
		m_FBStep -= m_UnitFBStep;
	Walking::GetInstance()->X_MOVE_AMPLITUDE = m_FBStep;

	if(m_RLTurn > 0 && m_GoalRLTurn < 0)
		m_RLTurn = 0;
	else if(m_RLTurn < 0 && m_GoalRLTurn > 0)
		m_RLTurn = 0;


	if(m_RLTurn < m_GoalRLTurn)
		m_RLTurn += m_UnitRLTurn;
	else if(m_RLTurn > m_GoalRLTurn)
		m_RLTurn -= m_UnitRLTurn;

	if(m_RLTurn > m_FollowMaxRLTurn)
		m_RLTurn = m_FollowMaxRLTurn;
	else if(m_RLTurn < -m_FollowMaxRLTurn)
		m_RLTurn = -m_FollowMaxRLTurn;


	Walking::GetInstance()->A_MOVE_AMPLITUDE = m_RLTurn;
	Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;
	Walking::GetInstance()->A_MOVE_AIM_ON = false;

	X_Moved += Walking::GetInstance()->Get_X_Moved();
	Y_Moved += Walking::GetInstance()->Get_Y_Moved();
	A_Moved += Walking::GetInstance()->Get_A_Moved() * 180 / PI;
	printf("goalFBStep = %lf \n", m_FBStep);

}


void BallFollower::ProcessAproachingBall(Point2D ball_pos, Vector2<int> ppfBall, bool EdgeField)
{
	Walking::GetInstance()->Start();
	EdgeOfField = EdgeField;

	if(ball_pos.X == -1.0 || ball_pos.Y == -1.0)//ALGORITMA MENCARI BOLA
 	{
		if(LostCounter > MaxLostCounter)
		{
			printf("CARI BOLA -----------\n");
			CountFirstTilt=0;
			ProcessSearchingBall();
 		}
		else
		{
			A_Moved = 0;
			X_Moved = 0;
			LostCounter++;
		}

	}
 	else //BOLA SUDAH KETEMU
 	{
		printf("APROACHING BALL--------------------------\n");
		PostEqualZero = true;
		KickDir = 2;
		LostCounter = 0;
 		m_NoBallCount = m_NoBallMaxCount + 25;
		countHeadSearchingCycle = 0;
		turn = false;

    double pan = MotionStatus::m_CurrentJoints.GetAngle(JointData::ID_HEAD_PAN);
    double pan_range = Head::GetInstance()->GetLeftLimitAngle();
    double pan_percent = pan / pan_range;

    double tilt = MotionStatus::m_CurrentJoints.GetAngle(JointData::ID_HEAD_TILT);
    double tilt_min = Head::GetInstance()->GetBottomLimitAngle();
    double tilt_range = Head::GetInstance()->GetTopLimitAngle() - tilt_min;
    double tilt_percent = (tilt - tilt_min) / tilt_range;
		if(tilt_percent < 0)
 	   tilt_percent = -tilt_percent;

		printf("tilt = %lf \n", tilt);
		printf("pan = %lf \n", pan);

		tiltLastSeenBall = tilt + ball_pos.Y;
		panLastSeenBall = pan + ball_pos.X;
		if(abs(panLastSeenBall) > 90)
			panLastSeenBall *= 180 /abs(panLastSeenBall);

		//if(ppfBall.x >= 800) //Bola masih cukup jauh
		if(tiltLastSeenBall >= tilt_min+40) //ngecek gawang bukan dari jarak bola, tetapi hanya dari nilai tilt kepala ketika dekatin bola
		{
			m_KickBallCount = 0;
			m_CountBallFound = 0;
			if(abs(pan) > 60)//bola terlalu di samping
			{
				m_GoalFBStep = 0;
				m_GoalRLTurn = m_FollowMaxRLTurn * pan_percent;
			}
			else
			{
				m_GoalFBStep = m_FollowMaxFBStep * tilt_percent;
				m_GoalRLTurn = m_FollowMaxRLTurn * pan_percent;
			}
		/*
       	m_GoalFBStep = m_FollowMaxFBStep * tilt_percent - (pan_percent * 40.0);
       	if(m_GoalFBStep < m_FollowMinFBStep)
   	       	m_GoalFBStep = m_FollowMinFBStep;
       	m_GoalRLTurn = m_FollowMaxRLTurn * pan_percent;
		*/
			A_Moved = 0;
		}
		else if (abs(pan) > 15)//bola udah deket, tapi masih di samping
    {
			//if(tilt < 0)
			//{
			m_GoalFBStep = 0;
			m_GoalRLTurn = (m_FollowMaxRLTurn * pan_percent);
			/*}
				else
				{
						m_GoalFBStep = 10;
			     	m_GoalRLTurn = (m_FollowMaxRLTurn * pan_percent);
				}*/
		}
		else		//bola udah deket dan lurus
		{
			panLastSeenBall = pan;//menyimpan nilai pan terakhir dapet bola
			tiltLastSeenBall = tilt;
			if(m_CountBallFound > m_MaxCountBallFound && ball_pos.Y < 5)
			{
				printf("LastTilt = %lf \n", LastTilt);
				BallDistance = ppfBall.x - 700;
				if(BallDistance <= 0)
					BallDistance = 0;

				MaxBallTurn = 0;
				CountMaxTurnBall = 0;
				countHeadSearchingCycle = 0;
				m_CountBallFound = 0;

				FirstTilt = false;
				EdgeOfField = false;

				m_NoBallCount = 0;

				//ngenolin semua parameter jalan
				X_Moved += Walking::GetInstance()->Get_X_Moved();
				Y_Moved += Walking::GetInstance()->Get_Y_Moved();
				A_Moved += Walking::GetInstance()->Get_A_Moved();
				X_Moved = 0;
				Y_Moved = 0;
				A_Moved = 0;
				//===========================
				Behavior::GetInstance()->set_check_post_position();

				return;
			}
			else
			{
					m_CountBallFound++;
					m_GoalFBStep = 10;
					m_GoalRLTurn = 0;
			}
		}
	}
	printf("goalFBStep = %lf \n", m_FBStep);

	Walking::GetInstance()->A_MOVE_AIM_ON = false;

	//process untuk memberikan parameter jalan
	if(m_FBStep < m_GoalFBStep)
		m_FBStep += m_UnitFBStep;
	else if(m_FBStep >= m_GoalFBStep)
		m_FBStep -= m_UnitFBStep;
	Walking::GetInstance()->X_MOVE_AMPLITUDE = m_FBStep;

	if(m_RLTurn > 0 && m_GoalRLTurn < 0)
		m_RLTurn = 0;
	else if(m_RLTurn < 0 && m_GoalRLTurn > 0)
		m_RLTurn = 0;

	if(m_RLTurn < m_GoalRLTurn)
		m_RLTurn += m_UnitRLTurn;
	else if(m_RLTurn > m_GoalRLTurn)
		m_RLTurn -= m_UnitRLTurn;

	if(m_RLTurn > m_FollowMaxRLTurn)
		m_RLTurn = m_FollowMaxRLTurn;
	else if(m_RLTurn < -m_FollowMaxRLTurn)
		m_RLTurn = -m_FollowMaxRLTurn;


	Walking::GetInstance()->A_MOVE_AMPLITUDE = m_RLTurn;

	Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;


	X_Moved += Walking::GetInstance()->Get_X_Moved();
	Y_Moved += Walking::GetInstance()->Get_Y_Moved();
	A_Moved += Walking::GetInstance()->Get_A_Moved() * 180 / PI;
}


void BallFollower::ProcessLocalizeGoalPost(Point2D ball_pos)
{
	double pan = MotionStatus::m_CurrentJoints.GetAngle(JointData::ID_HEAD_PAN);
	double pan_range = Head::GetInstance()->GetLeftLimitAngle();
	double pan_percent = pan / pan_range;

	double tilt = MotionStatus::m_CurrentJoints.GetAngle(JointData::ID_HEAD_TILT);
	double tilt_min = Head::GetInstance()->GetBottomLimitAngle();
	double tilt_range = Head::GetInstance()->GetTopLimitAngle() - tilt_min;
	double tilt_percent = (tilt - tilt_min) / tilt_range;

	if(tilt_percent < 0)
		tilt_percent = -tilt_percent;
	printf("X_Moved = %lf \n ", X_Moved);

	if(X_Moved >= BallDistance)//jika udah deket dengan bola
	{
		Walking::GetInstance()->Stop();
		m_GoalFBStep = 0;
		m_GoalRLStep = 0;
		m_GoalRLTurn = 0;
	}
	else if(abs(A_Moved) < abs(panLastSeenBall))//jika tadi putarannya belum bener
	{
		m_GoalFBStep = 10;
		m_GoalRLTurn = panLastSeenBall/4;//DIUBAH lagi
		m_GoalRLStep = 0;
	}
	else
	{
		m_GoalFBStep = 10;
		m_GoalRLStep = 0;
		m_GoalRLTurn = 0;
	}

	if(m_FBStep > m_GoalFBStep)
	  m_FBStep -= m_UnitFBStep;
  else if(m_FBStep < m_GoalFBStep)
    m_FBStep += m_GoalFBStep;
  Walking::GetInstance()->X_MOVE_AMPLITUDE = m_FBStep;
	X_Moved += Walking::GetInstance()->Get_X_Moved();

	if(m_RLTurn > 0 && m_GoalRLTurn < 0)
		m_RLTurn = 0;
	else if(m_RLTurn < 0 && m_GoalRLTurn > 0)
		m_RLTurn = 0;

  if(m_RLTurn < m_GoalRLTurn)
    m_RLTurn += m_UnitRLTurn;
  else if(m_RLTurn > m_GoalRLTurn)
    m_RLTurn -= m_UnitRLTurn;
  Walking::GetInstance()->A_MOVE_AMPLITUDE = m_RLTurn;
	A_Moved += Walking::GetInstance()->Get_A_Moved() * 180 /PI;
	printf("A_Moved = %lf\n", A_Moved); 

	Walking::GetInstance()->Y_MOVE_AMPLITUDE = m_GoalRLStep;
}


void BallFollower::ProcessAproachingBall2(Point2D ball_pos)
{
	Walking::GetInstance()->Start();
	if(ball_pos.X == -1.0 || ball_pos.Y == -1.0)//habis waituntilready= false, kalo bola ilang, maka akan searching dulu
 	{
		if(LostCounter > MaxLostCounter)
		{
			printf("CARI BOLA -----------\n");
			//ngenolin parameter muternya
			//X_Moved ga dinolin biar tau jaraknya dia ke bola berapa sekarang
			CountMaxTurnBall = 0;
			ProcessSearchingBall();
		}
		else
		{
			LostCounter++;
   		X_Moved = 0;
   		A_Moved = 0;
   	}
  }
  else //BOLA SUDAH KETEMU
  {
 		m_NoBallCount = 0;
		LostCounter = 0;
    double pan = MotionStatus::m_CurrentJoints.GetAngle(JointData::ID_HEAD_PAN);
    double pan_range = Head::GetInstance()->GetLeftLimitAngle();
	  double pan_percent = pan / pan_range;
    double tilt = MotionStatus::m_CurrentJoints.GetAngle(JointData::ID_HEAD_TILT);
    double tilt_min = Head::GetInstance()->GetBottomLimitAngle();
    double tilt_range = Head::GetInstance()->GetTopLimitAngle() - tilt_min;
    double tilt_percent = (tilt - tilt_min) / tilt_range;
    if(tilt_percent < 0)
     tilt_percent = -tilt_percent;

		tiltLastSeenBall = tilt + ball_pos.Y;
		panLastSeenBall = pan + ball_pos.X;
 		if(abs(panLastSeenBall) > 90)
			panLastSeenBall *= 180 /abs(panLastSeenBall);

		printf("tilt = %lf \n", tilt);

		if(tilt > tilt_min + 50)
		{
  	     	m_GoalFBStep = (m_FollowMaxFBStep * tilt_percent * 0.8);
		     	if(m_GoalFBStep < m_FollowMinFBStep)
    	    	m_GoalFBStep = m_FollowMinFBStep;
         	m_GoalRLTurn = m_FollowMaxRLTurn * pan_percent;
				Behavior::GetInstance()->set_normal_state();		
		}
		else if(tilt > tilt_min + 30)//kalo tiltnya masih belum cukup untuk ke turningball //20
		{
			if(tilt > tilt_min+25) //25
			{
				if(pan > 30 || pan < -30)
       	                	//BOLA BERADA DI KANAN ATO KIRI, SEHINGGA PERLU MUTER DAHULU
       	{
	        m_GoalFBStep = 0;
	        m_GoalRLTurn = m_FollowMaxRLTurn * pan_percent;
				}
				else
				{
  	     	m_GoalFBStep = (m_FollowMaxFBStep * tilt_percent * 0.6);
		     	if(m_GoalFBStep < m_FollowMinFBStep)
    	    	m_GoalFBStep = m_FollowMinFBStep;
         	m_GoalRLTurn = m_FollowMaxRLTurn * pan_percent;
				}
			}
			else//udah cukup dekat
			{
				if(pan > 5 || pan < -5)//awalnya 10, diubah 210414
       	                	//BOLA BERADA DI KANAN ATO KIRI, SEHINGGA PERLU MUTER DAHULU
       	{
      		 m_GoalFBStep = 0;
	        m_GoalRLTurn = m_FollowMaxRLTurn * pan_percent;
				}
				else
				{
					if(ball_pos.Y < m_KickTopAngle)//udah deket
					{
						m_GoalFBStep = 5;//awalnya 10, diubah 210414
						m_GoalRLTurn = m_FollowMaxRLTurn * pan_percent;
					}
					else
					{
						m_GoalFBStep = 10;//awalnya 15, diubah 210414
						m_GoalRLTurn = m_FollowMaxRLTurn * pan_percent;
					}
				}
			}
		}
		else		//SAATNYA MUTER BOLA
		{
			//x_moved udah dinolin di behavior;
			Behavior::GetInstance()->set_turn_around_ball();
//		X_Moved += Walking::GetInstance()->Get_X_Moved();
			X_Moved = 0;
			m_KickBallCount = 0;
			return;
		}

	//process untuk memberikan parameter jalan
	if(m_FBStep < m_GoalFBStep)
		m_FBStep += m_UnitFBStep;
	else if(m_FBStep >= m_GoalFBStep)
		m_FBStep -= m_UnitFBStep;
	Walking::GetInstance()->X_MOVE_AMPLITUDE = m_FBStep;
	Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;

	if(m_RLTurn > 0 && m_GoalRLTurn < 0)
		m_RLTurn = 0;
	else if(m_RLTurn < 0 && m_GoalRLTurn > 0)
		m_RLTurn = 0;

	if(m_RLTurn < m_GoalRLTurn)
		m_RLTurn += m_UnitRLTurn;
	else if(m_RLTurn > m_GoalRLTurn)
		m_RLTurn -= m_UnitRLTurn;

	if(m_RLTurn > m_FollowMaxRLTurn)
		m_RLTurn = m_FollowMaxRLTurn;
	else if(m_RLTurn < -m_FollowMaxRLTurn)
		m_RLTurn = -m_FollowMaxRLTurn;

	Walking::GetInstance()->A_MOVE_AMPLITUDE = m_RLTurn;


	A_Moved += Walking::GetInstance()->Get_A_Moved() * 180/PI;
	X_Moved += Walking::GetInstance()->Get_X_Moved();
	printf("A_Moved = %lf\n", A_Moved); 
  }
}


void BallFollower::Process(Point2D ball_pos)
{
    Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;
    Walking::GetInstance()->Z_MOVE_AMPLITUDE = 40;

    if(ball_pos.X == -1.0 || ball_pos.Y == -1.0)
    {
        FirstTilt = false;
		if(m_NoBallCount > m_NoBallMaxCount && countHeadSearchingCycle > 2)
		{
			m_GoalFBStep = 0;

				if(Head::GetInstance()->CheckLastPanAngle() == RIGHT )
				{
					m_GoalRLTurn = -30;
				}
       	else if(Head::GetInstance()->CheckLastPanAngle() == LEFT )
				{
					m_GoalRLTurn = 30;
				}
		}
		else
		{
			m_NoBallCount++;

			m_GoalFBStep = 20;
		}
    }
    else
    {
		m_NoBallCount = 0;

		double pan = MotionStatus::m_CurrentJoints.GetAngle(JointData::ID_HEAD_PAN);
		double pan_range = Head::GetInstance()->GetLeftLimitAngle();
		double pan_percent = pan / pan_range;

		double tilt = MotionStatus::m_CurrentJoints.GetAngle(JointData::ID_HEAD_TILT);
		double tilt_min = Head::GetInstance()->GetBottomLimitAngle();
		double tilt_range = Head::GetInstance()->GetTopLimitAngle() - tilt_min;
		double tilt_percent = (tilt - tilt_min) / tilt_range;
		if(tilt_percent < 0)
			tilt_percent = -tilt_percent;

        if(FirstTilt == false) //mengassign tilt pertama saat ketemu bola...
        {
             TiltAngle = tilt;
             FirstTilt = true;
        }


		//if(pan > m_KickRightAngle && pan < m_KickLeftAngle)
		if(tilt <= TiltAngle*2/3)
		{
            Behavior::GetInstance()->set_check_post_position();
		}
		if(pan > -15 && pan < 15)  		//JIKA BOLA BERADA DI TENGAH
		{
			//artinya bola udah deket dengan kaki
			if(tilt <= (tilt_min + MX28::RATIO_VALUE2ANGLE + 10))
			{
				if(ball_pos.Y < m_KickTopAngle + 10)
				{
					m_GoalFBStep = 0;
					m_GoalRLTurn = 0;

					if(m_KickBallCount >= m_KickBallMaxCount) //BOLA SIAP TENDANG, CARI GAWANG
					{
						m_FBStep = 0;
						m_RLTurn = 0;
						Behavior::GetInstance()->set_check_post_position();

						Head::GetInstance()->MoveByAngle(0, 40);
						Walking::GetInstance()->X_MOVE_AMPLITUDE = 0;
						Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;
						Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;
					}
					else
					{
						m_KickBallCount++;
					}
				}
				else
				{
					m_KickBallCount = 0;
					m_GoalFBStep = m_FitFBStep;
					m_GoalRLTurn = m_FitMaxRLTurn * pan_percent;
				}
			}
			else
			{
				m_KickBallCount = 0;
				m_GoalFBStep = m_FollowMaxFBStep * tilt_percent;
				if(m_GoalFBStep < m_FollowMinFBStep)
				    m_GoalFBStep = m_FollowMinFBStep;
				m_GoalRLTurn = m_FollowMaxRLTurn * pan_percent;
			}
		}
		else //KALO BOLA MASIH SANGAT JAUH
		{
		    if(pan > Head::GetInstance()->GetLeftLimitAngle()-10 || pan < Head::GetInstance()->GetRightLimitAngle()+10)
		    //BOLA BERADA DI KANAN ATO KIRI, SEHINGGA PERLU MUTER DAHULU
		    {
			m_GoalFBStep = 0;
		    }
		    else
		    //BOLA UDAH GA TERLALU JAUH UNTUK PERLU MUTER
		    {
			if(tilt <= (tilt_min + MX28::RATIO_VALUE2ANGLE + 50))
			//KALO UDAH DEKET BOLA
			{
				m_GoalFBStep = 0;
			}
			else
			{
				m_GoalFBStep = m_FollowMaxFBStep * tilt_percent;
                                if(m_GoalFBStep < m_FollowMinFBStep)
                                    m_GoalFBStep = m_FollowMinFBStep;
			}
		    }


			m_KickBallCount = 0;
			m_GoalRLTurn = m_FollowMaxRLTurn * pan_percent;
		}
	}


	//process untuk memberikan parameter jalan
	if(m_FBStep < m_GoalFBStep)
		m_FBStep += m_UnitFBStep;
	else if(m_FBStep > m_GoalFBStep)
		m_FBStep = m_GoalFBStep;
	Walking::GetInstance()->X_MOVE_AMPLITUDE = m_FBStep;

	if(m_RLTurn > 0 && m_GoalRLTurn < 0)
		m_RLTurn = 0;
	else if(m_RLTurn < 0 && m_GoalRLTurn > 0)
		m_RLTurn = 0;

	if(m_RLTurn < m_GoalRLTurn)
		m_RLTurn += m_UnitRLTurn;
	else if(m_RLTurn > m_GoalRLTurn)
		m_RLTurn -= m_UnitRLTurn;
	Walking::GetInstance()->A_MOVE_AMPLITUDE = m_RLTurn;

}

void BallFollower::ProcessToKick(Point2D ball_pos)
{
	if(ball_pos.X == -1.0 || ball_pos.Y == -1.0)        // CEK JIKA BOLA TIDAK KETEMU
    	{
		 CountMaxTurnBall = 0;
                printf("BOLA HILANG\n");
                if(m_NoBallCount < 5)
                {
                        X_Moved = Walking::GetInstance()->Get_X_Moved();
                        X_Moved = 0;
                }
                else
                {
                        Walking::GetInstance()->X_MOVE_AMPLITUDE = -10;
                        Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;
                        Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;
                        if(panLastSeenBall < -10)
                                Walking::GetInstance()->Y_MOVE_AMPLITUDE = 10;
                        else if(panLastSeenBall > 10)
                                Walking::GetInstance()->Y_MOVE_AMPLITUDE = -10;

                        X_Moved = Walking::GetInstance()->Get_X_Moved();
                        if(X_Moved > -500)
                                Behavior::GetInstance()->set_normal_state();
                }

                        m_NoBallCount++;

	/*	if(m_NoBallCount > m_NoBallMaxCount)
		{
			Behavior::GetInstance()->set_normal_state();

			counterGetBall = 0;
			Walking::GetInstance()->X_MOVE_AMPLITUDE = 0;
        		Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;
        		Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;
        		Walking::GetInstance()->A_MOVE_AIM_ON = false;
		}
		else
		{
			m_NoBallCount++;
		}*/
    	}
    	else                                        // CEK JIKA BOLA KETEMU
	{
		m_NoBallCount = 0;

		double pan = MotionStatus::m_CurrentJoints.GetAngle(JointData::ID_HEAD_PAN);
		double pan_range = Head::GetInstance()->GetLeftLimitAngle();
		double pan_percent = pan / pan_range;

		double tilt = MotionStatus::m_CurrentJoints.GetAngle(JointData::ID_HEAD_TILT);
		double tilt_min = Head::GetInstance()->GetBottomLimitAngle();
		double tilt_range = Head::GetInstance()->GetTopLimitAngle() - tilt_min;
		double tilt_percent = (tilt - tilt_min) / tilt_range;
		if(tilt_percent < 0)
			tilt_percent = -tilt_percent;

		if(pan > m_KickRightAngle && pan < m_KickLeftAngle)                                     // CEK JIKA BOLA BERADA LURUS DI DEPAN
		{
			if(tilt <= (tilt_min + MX28::RATIO_VALUE2ANGLE + 15))
                	{
				counterGetBall = 0;
				if(ball_pos.Y < m_KickTopAngle + 10)
				{
					Walking::GetInstance()->X_MOVE_AMPLITUDE = 0;

					if(pan > -10 && pan < 10)
					{
						Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;

						if((m_KickBallCount-5) >= m_KickBallMaxCount)                                   // JIKA COUNT SUDAH CUKUP MAKA TENDANG
						{
							if(pan > 0)
							{
								Walking::GetInstance()->A_MOVE_AIM_ON = false;
								Walking::GetInstance()->LeftKick();
								//printf("LEFTKICK\n");
							}
							else if(pan < 0)
							{
								Walking::GetInstance()->A_MOVE_AIM_ON = false;
								Walking::GetInstance()->RightKick();
								//printf("RIGHTKICK\n");
							}
						}
						else                                                                        // JIKA COUNT BELUM CUKUP, JANGAN TENDANG
						{
							m_KickBallCount++;
						}
					}
					else if(pan < -10)
					{
						Walking::GetInstance()->Y_MOVE_AMPLITUDE = -10;
//						m_KickBallCount = 0;
					}
					else if(pan > 10)
					{
						Walking::GetInstance()->Y_MOVE_AMPLITUDE = 10;
//						m_KickBallCount = 0;
					}
				}
				else                                                                            // CEK JIKA OFFSET BOLA > -5
				{
					m_KickBallCount = 0;
					Walking::GetInstance()->X_MOVE_AMPLITUDE = 5;
				}
			}
			else if(tilt <= (tilt_min + MX28::RATIO_VALUE2ANGLE + 25))
			{
				m_KickBallCount = 0;
				Walking::GetInstance()->X_MOVE_AMPLITUDE = 5;
				Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;
				Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;
			}
			else //kalo tiltnya besar, bolanya ketendang, jadi dia maju dulu
                	{
				m_KickBallCount = 0;
                        	if(counterGetBall < 10)
				{
                              		counterGetBall++;

					Walking::GetInstance()->X_MOVE_AMPLITUDE = 20;
				}
                       	 	else
                	        {
					Behavior::GetInstance()->set_normal_state();

                              		counterGetBall = 0;
					//Walking::GetInstance()->X_MOVE_AMPLITUDE = 10;
                                        Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;
                                        Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;
                              		Walking::GetInstance()->A_MOVE_AIM_ON = false;
                        	}
                	}
		}
		else //bola tidak lurus di depan
                {
			m_KickBallCount =  0;
			if(tilt >= (tilt_min + MX28::RATIO_VALUE2ANGLE + 5.0))
                        {
                        	if(counterGetBall < 20)
                                	counterGetBall++;
                        	else
                        	{
					Behavior::GetInstance()->set_normal_state();

                                	counterGetBall = 0;
					Walking::GetInstance()->X_MOVE_AMPLITUDE = 10;
					Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;
					Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;
                                	Walking::GetInstance()->A_MOVE_AIM_ON = false;
                        	}
			}
			else
			{
				if(pan < 0)
				{
					Walking::GetInstance()->X_MOVE_AMPLITUDE = -5;
					Walking::GetInstance()->Y_MOVE_AMPLITUDE = -30;
					Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;
				}
				else
				{
					Walking::GetInstance()->X_MOVE_AMPLITUDE = -5;
					Walking::GetInstance()->Y_MOVE_AMPLITUDE = 30;
					Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;
				}
			}
                }
	}
}


int counter_penalty_kick = 0;

void BallFollower::ProcessKick(Point2D ball_pos, double PanPost, int CompassError, int PostPosition)
{
	if(ball_pos.X == -1.0 || ball_pos.Y == -1.0)        // CEK JIKA BOLA TIDAK KETEMU
	{
		if((LostCounter > MaxLostCounter) && Behavior::GetInstance()->flagHabisTendang == false)
		{
			printf("PROCESS KICK\n");
			Walking::GetInstance()->Start();
      			Walking::GetInstance()->m_Joint.SetEnableBodyWithoutHead(true, true);
			ProcessSearchingBall();
		}
		else
			LostCounter++;
	}
  	else                                        // CEK JIKA BOLA KETEMU
  	{
		m_NoBallCount = 0;
		LostCounter = 0;

		double pan = MotionStatus::m_CurrentJoints.GetAngle(JointData::ID_HEAD_PAN);
		double pan_range = Head::GetInstance()->GetLeftLimitAngle();
		double pan_percent = pan / pan_range;

		double tilt = MotionStatus::m_CurrentJoints.GetAngle(JointData::ID_HEAD_TILT);
		double tilt_min = Head::GetInstance()->GetBottomLimitAngle();
		double tilt_range = Head::GetInstance()->GetTopLimitAngle() - tilt_min;
		double tilt_percent = (tilt - tilt_min) / tilt_range;
		if(tilt_percent < 0)
			tilt_percent = -tilt_percent;
		printf("pan = %lf\n", pan);
		printf("tilt = %lf\n", tilt);
		printf("flag = %d \n", flag);

		tiltLastSeenBall = tilt + ball_pos.Y;
		panLastSeenBall = pan + ball_pos.X;
		if(abs(panLastSeenBall) > 90)
			panLastSeenBall *= 180 /abs(panLastSeenBall);

		MaxBallTurn = PanPost;// + A_Moved * 3/4; //sudut maksimum untuk muter
		double TurningAngle = MaxBallTurn + (CompassError * 360/255);//konstata putar; sudut putar - (sudut saat ini - sudut setpoint)

		printf("\t\t\tUDAH LURUS GAWANG\n");
		//ball_pos.Y udah dalam bentuk angle. untuk pixel Y < center camera, maka ball_pos.Y-nya adalah positif
		if(panLastSeenBall >= m_KickRightAngle && panLastSeenBall <= m_KickLeftAngle && tilt < tilt_min + MX28::RATIO_VALUE2ANGLE + 30)//DIUBAH // CEK JIKA BOLA BERADA LURUS DI DEPAN
    		{
			if(KickDir == 0)
			{
	      			if(tilt < tilt_min + MX28::RATIO_VALUE2ANGLE + 5) //bola di deket kaki //tadinya + 15
        			{
  	      				if(ball_pos.Y < m_KickTopAngle) //tadinya -tilt
					{
    		 				if(panLastSeenBall < 0)
        					{
        	    					KickBall = -1;
          					}
          					else
          					{
          	  					KickBall = 1;
            					}
          				}
          				else
          				{
        	  				KickBall = 0;
            					Walking::GetInstance()->Start();
            					Walking::GetInstance()->X_MOVE_AMPLITUDE = 5;
            					Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;
            					Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;
            					m_KickBallCount=0;
          				}
        			}
        			else
        			{
        					KickBall = 0;
          				Walking::GetInstance()->Start();
          				Walking::GetInstance()->X_MOVE_AMPLITUDE = 10;
          				Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;
          				Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;
									m_KickBallCount = 0;
        			}
			}
			else if(KickDir == -1)
			{
				printf("Kick Direction equal minus 1\n");
				if(tilt < tilt_min + MX28::RATIO_VALUE2ANGLE + 10) //bola di deket kaki //tadinya + 15
				{
					if(ball_pos.Y < 5) //tadinya -tilt
					{
	       					if(pan > 18)
						{
							printf("\t\tPan > 18\n");
							KickBall = 0;
     	        					m_KickBallCount = 0;
							Walking::GetInstance()->X_MOVE_AMPLITUDE = -3;
 							Walking::GetInstance()->Y_MOVE_AMPLITUDE = 10;
							Walking::GetInstance()->A_MOVE_AMPLITUDE = 0; //-3
						}
						else if(pan < 10)
						{
							printf("\t\tPan < 10\n");
							KickBall = 0;
     	        					m_KickBallCount = 0;
							Walking::GetInstance()->X_MOVE_AMPLITUDE = -3;
 							Walking::GetInstance()->Y_MOVE_AMPLITUDE = -10;
							Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;	//3
						}
						else
						{
		        				flag = 1;
							if(tilt < tilt_min + MX28::RATIO_VALUE2ANGLE + 10)
							{
								if(ball_pos.Y < 5)
								{
									KickBall = 2;
								}
								else
								{
									KickBall = 0;
									Walking::GetInstance()->X_MOVE_AMPLITUDE = 3;
 									Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;
       	        							m_KickBallCount = 0;
									Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;
								}
							}
							else
							{
								KickBall = 0;
								Walking::GetInstance()->X_MOVE_AMPLITUDE = 3;
 								Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;
     	        						m_KickBallCount = 0;
								Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;
							}
						}
					}
					else
					{
         					if(pan > 18) //di sebelah kiri
						{
							printf("\t\tPan > 18\n");
							KickBall = 0;
							Walking::GetInstance()->X_MOVE_AMPLITUDE = 0; //-3
 							Walking::GetInstance()->Y_MOVE_AMPLITUDE = 10;
              						m_KickBallCount = 0;
							Walking::GetInstance()->A_MOVE_AMPLITUDE = 0; //-3
						}
						else if(pan < 10) //di sebelah kanan
						{
							printf("\t\tPan < 10\n");
							KickBall = 0;
							Walking::GetInstance()->X_MOVE_AMPLITUDE = 0; //-3
 							Walking::GetInstance()->Y_MOVE_AMPLITUDE = -10;
     	        					m_KickBallCount = 0;
							Walking::GetInstance()->A_MOVE_AMPLITUDE = 0; //3
						}
						else
						{
							KickBall = 0;
             						Walking::GetInstance()->X_MOVE_AMPLITUDE = 5;
             						Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;
             						m_KickBallCount = 0;
             						Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;
						}
					}
				}
				else
				{
	          				if(pan > 18)
						{
							printf("\t\tPan > 18\n");
							KickBall = 0;
							Walking::GetInstance()->X_MOVE_AMPLITUDE = 0;//-3
 							Walking::GetInstance()->Y_MOVE_AMPLITUDE =10;
           						m_KickBallCount = 0;
							Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;//-3
						}
						else if(pan < 10)
						{
							printf("\t\tPan < 10\n");
							KickBall = 0;
              						m_KickBallCount = 0;
							Walking::GetInstance()->X_MOVE_AMPLITUDE = 0; //-3
 							Walking::GetInstance()->Y_MOVE_AMPLITUDE = -10;
							Walking::GetInstance()->A_MOVE_AMPLITUDE = 0; //3
						}
						else
						{
							KickBall = 0;
           						m_KickBallCount = 0;
           						Walking::GetInstance()->X_MOVE_AMPLITUDE = 5;
           						Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;
           						Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;
						}
				}
			}
			else if(KickDir == 1)
			{
				printf("Kick Direction equal 1\n");
				if(tilt < tilt_min + MX28::RATIO_VALUE2ANGLE + 10) //bola di deket kaki //tadinya + 15
				{
					if(ball_pos.Y < 5) //tadinya -tilt
					{ //flag digunakan biar setelah nendang, ga perlu ngepasin lagi buat nendang berikutnya
	          				if(pan < -18)
						{
							printf("\t\tPan < -18\n");
					   		KickBall = 0;
              						m_KickBallCount = 0;
							Walking::GetInstance()->X_MOVE_AMPLITUDE = 0;//-3
 							Walking::GetInstance()->Y_MOVE_AMPLITUDE = -10;
							Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;//3
						}
						else if(pan > -10)
						{
							printf("\t\tPan > -10\n");
		        				KickBall = 0;
              						m_KickBallCount = 0;
							Walking::GetInstance()->X_MOVE_AMPLITUDE = 0;//-3
 							Walking::GetInstance()->Y_MOVE_AMPLITUDE = 10;
							Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;//-3
						}
						else
						{
		        				flag = 1;
							if(tilt < tilt_min + MX28::RATIO_VALUE2ANGLE + 10)
							{
								if(ball_pos.Y < 5)
								{
									KickBall = -2;
								}
								else
								{
									KickBall = 0;
                							m_KickBallCount = 0;
									Walking::GetInstance()->X_MOVE_AMPLITUDE = 3;
 									Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;
									Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;
								}
							}
							else
							{
								KickBall = 0;
     	        						m_KickBallCount = 0;
								Walking::GetInstance()->X_MOVE_AMPLITUDE = 3;
 								Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;
								Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;
							}
						}
					}
					else
					{
	          				if(pan < -18)
						{
							printf("\t\tPan < -18\n");
					    		KickBall = 0;
	   	        				m_KickBallCount = 0;
							Walking::GetInstance()->X_MOVE_AMPLITUDE = 0;//-3
 							Walking::GetInstance()->Y_MOVE_AMPLITUDE = -10;
							Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;//3
						}
						else if(pan > -10)
						{
							printf("\t\tPan > -10\n");
					    		KickBall = 0;
     	        					m_KickBallCount = 0;
							Walking::GetInstance()->X_MOVE_AMPLITUDE = 0;//-3
 							Walking::GetInstance()->Y_MOVE_AMPLITUDE = 10;
							Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;//-3

						}
						else
						{
							KickBall = 0;
             						m_KickBallCount = 0;
             						Walking::GetInstance()->X_MOVE_AMPLITUDE = 5;
             						Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;
             						Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;
						}
					}
				}
				else
				{
	          				if(pan < -18)
						{
							printf("\t\tPan < -18\n");
		        				KickBall = 0;
              						m_KickBallCount = 0;
							Walking::GetInstance()->X_MOVE_AMPLITUDE = 0;//-3
 							Walking::GetInstance()->Y_MOVE_AMPLITUDE = -10;
							Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;//3
						}
						else if(pan > -10)
						{
							printf("\t\tPan > -10\n");
					    		KickBall = 0;
              						m_KickBallCount = 0;
							Walking::GetInstance()->X_MOVE_AMPLITUDE = 0;//-3
 							Walking::GetInstance()->Y_MOVE_AMPLITUDE = 10;
							Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;//-3

						}
						else
						{
							KickBall = 0;
            						m_KickBallCount = 0;
            						Walking::GetInstance()->X_MOVE_AMPLITUDE = 5;
            						Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;
            						Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;
						}
				}
			}
			else if(tilt < tilt_min + MX28::RATIO_VALUE2ANGLE + 25) //bola agak ke depan
			{
				KickBall = 0;
				flag = 0;
				Walking::GetInstance()->X_MOVE_AMPLITUDE = 10;
				Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;
				Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;
			}
			else
			{
				KickBall = 0;
				flag = 0;
				Walking::GetInstance()->Start();
				Walking::GetInstance()->m_Joint.SetEnableBodyWithoutHead(true, true);
				Behavior::GetInstance()->set_normal_state();
			}
		}
		else if(panLastSeenBall > m_KickLeftAngle && panLastSeenBall < Head::GetInstance()->m_LeftLimit - 15 && tilt < tilt_min+MX28::RATIO_VALUE2ANGLE + 30)
		{
			flag = 0;
			KickBall = 0;
			m_KickBallCount = 0;
			printf("\t\tATAS\n");
			Walking::GetInstance()->X_MOVE_AMPLITUDE = -5;//diubah 210414
			Walking::GetInstance()->Y_MOVE_AMPLITUDE = 10;
			Walking::GetInstance()->A_MOVE_AMPLITUDE = 3;
		}
		else if(panLastSeenBall < m_KickRightAngle && panLastSeenBall > Head::GetInstance()->m_RightLimit + 15 && tilt < tilt_min+MX28::RATIO_VALUE2ANGLE + 30)
		{
			flag = 0;
			KickBall = 0;
			m_KickBallCount = 0;
			printf("\t\tBAWAH\n");
			Walking::GetInstance()->X_MOVE_AMPLITUDE = -5;//diubah 210414
			Walking::GetInstance()->Y_MOVE_AMPLITUDE = -10;
			Walking::GetInstance()->A_MOVE_AMPLITUDE = -3;
		}
		else
		{
			KickBall = 0;
			flag = 0;
			Walking::GetInstance()->Start();
      			Walking::GetInstance()->m_Joint.SetEnableBodyWithoutHead(true, true);
		  	Behavior::GetInstance()->set_normal_state();
		}
	}

}

void BallFollower::ProcessLocalizePenaltyMark(Point2D ball_pos)
{

    if(ball_pos.X == -1.0 || ball_pos.Y == -1.0)        // CEK JIKA BOLA TIDAK KETEMU
    {
		if(m_NoBallCount > m_NoBallMaxCount && countHeadSearchingCycle > 2)
		{
			// can not find a ball
			m_GoalFBStep = 0;
			Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;

			if(Head::GetInstance()->CheckLastPanAngle() == RIGHT )
				m_GoalRLTurn = -30;
      else if(Head::GetInstance()->CheckLastPanAngle() == LEFT )
				m_GoalRLTurn = 30;
		}
		else
		{
			m_NoBallCount++;
		}
    }
    else                                        // CEK JIKA BOLA KETEMU
    {
		m_NoBallCount = 0;

		double pan = MotionStatus::m_CurrentJoints.GetAngle(JointData::ID_HEAD_PAN);
		double pan_range = Head::GetInstance()->GetLeftLimitAngle();
		double pan_percent = pan / pan_range;

		double tilt = MotionStatus::m_CurrentJoints.GetAngle(JointData::ID_HEAD_TILT);
		double tilt_min = Head::GetInstance()->GetBottomLimitAngle();
		double tilt_range = Head::GetInstance()->GetTopLimitAngle() - tilt_min;
		double tilt_percent = (tilt - tilt_min) / tilt_range;
		if(tilt_percent < 0)
			tilt_percent = -tilt_percent;

		if(pan > m_KickRightAngle && pan < 10)//m_KickLeftAngle)                                     // CEK JIKA BOLA BERADA LURUS DI DEPAN
		{
			m_GoalFBStep = 0;
                        m_GoalRLTurn = 0;

			if(Head::GetInstance()->GetTiltAngle() < 35)
			{
				m_GoalFBStep = -10;
			}
			else
				m_GoalFBStep = 10;

			if(GoalPercept::GetInstance()->Status != GoalPercept::NONE)
			{
				ball_pos.X *= ((double)Camera::WIDTH / Camera::VIEW_H_ANGLE);
				ball_pos.X *= -1;
				Point2D center = Point2D(Camera::WIDTH/2, Camera::HEIGHT/2);
				ball_pos.X += center.X;

				if(ball_pos.X - GoalPercept::GetInstance()->Center.X > 5)
				{
					Walking::GetInstance()->Y_MOVE_AMPLITUDE = -25;
				}
				else if(ball_pos.X - GoalPercept::GetInstance()->Center.X < 5)
				{
					Walking::GetInstance()->Y_MOVE_AMPLITUDE = 25;
				}
				else
				{
//					Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;
				}
			}
			else
			{
				Walking::GetInstance()->Y_MOVE_AMPLITUDE = -25;
			}
		}
		else                                                                                    // CEK JIKA BOLA TIDAK BERADA LURUS DI DEPAN
		{
			Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;
			m_GoalFBStep = 0;
			m_GoalRLTurn = m_FollowMaxRLTurn * pan_percent;
		}
	}

		if(m_FBStep < m_GoalFBStep)
			m_FBStep += m_UnitFBStep;
		else if(m_FBStep > m_GoalFBStep)
			m_FBStep = m_GoalFBStep;
		Walking::GetInstance()->X_MOVE_AMPLITUDE = m_FBStep;

	if(m_RLTurn > 0 && m_GoalRLTurn < 0)
		m_RLTurn = 0;
	else if(m_RLTurn < 0 && m_GoalRLTurn > 0)
		m_RLTurn = 0;

		if(m_RLTurn < m_GoalRLTurn)
			m_RLTurn += m_UnitRLTurn;
		else if(m_RLTurn > m_GoalRLTurn)
			m_RLTurn -= m_UnitRLTurn;
		Walking::GetInstance()->A_MOVE_AMPLITUDE = m_RLTurn;

}

void BallFollower::ProcessPenaltyKick(Point2D ball_pos)
{
	printf("masxballturn = %lf \n", MaxBallTurn);
	printf("count = %lf \n", CountMaxTurnBall);
	printf("random kick = %d \n", RandomKick);
        double pan = MotionStatus::m_CurrentJoints.GetAngle(JointData::ID_HEAD_PAN);
        double pan_range = Head::GetInstance()->GetLeftLimitAngle();
        double pan_percent = pan / pan_range;
	if (pan_percent < 0)
		pan_percent = -pan_percent;

        double tilt = MotionStatus::m_CurrentJoints.GetAngle(JointData::ID_HEAD_TILT);
        double tilt_min = Head::GetInstance()->GetBottomLimitAngle();
        double tilt_range = Head::GetInstance()->GetTopLimitAngle() - tilt_min;
        double tilt_percent = (tilt - tilt_min) / tilt_range;
        if(tilt_percent < 0)
               	tilt_percent = -tilt_percent;

	Goback = true;


	if(ball_pos.X == -1 || ball_pos.Y == -1)//bola ga ketemu, maka maju perlahan
	{
		m_GoalFBStep = 5;
		m_GoalRLStep = 0;
		m_GoalRLTurn = 0;
	}
	else	
	{
		if(tilt < 0)                                     // CEK JIKA BOLa dekat
                {
			if(pan >= -20 && pan <= 20)//bola lurus di depan
			{
				if(tilt < tilt_min + MX28::RATIO_VALUE2ANGLE) //bola di deket kaki //tadinya + 15
				{
					if(ball_pos.Y < 40) //tadinya -tilt
					{
						if(pan < 0)
							KickBall = -1;
						else
							KickBall = 1;	
					}			
					else
					{
						KickBall = 0;
						Walking::GetInstance()->Start();
						m_GoalFBStep = 5;
						m_GoalRLStep = 0;
						m_GoalRLTurn = 0;
					}
				}				
				else
				{
					KickBall = 0;
					Walking::GetInstance()->Start();
					m_GoalFBStep = 5;
					m_GoalRLStep = 0;
					m_GoalRLTurn = 0;
				}
			}
			else if(pan > 20)
			{
				KickBall = 0;
				Walking::GetInstance()->Start();
				m_GoalFBStep = 0;
				m_GoalRLStep = 10;
				m_GoalRLTurn = 0;
			}
			else if(pan < 20)
			{
				KickBall = 0;
				Walking::GetInstance()->Start();
				m_GoalFBStep = 0;
				m_GoalRLStep = -10;
				m_GoalRLTurn = 0;
			}
		}
		else
		{
			KickBall = 0;
			Walking::GetInstance()->Start();
			m_GoalFBStep = 30 * tilt_percent;
			m_GoalRLStep = 30 * pan_percent;
			m_GoalRLTurn = 0;
		}
	}
	if(m_FBStep < m_GoalFBStep)
		m_FBStep += m_UnitFBStep;
	else if(m_FBStep >= m_GoalFBStep)
		m_FBStep -= m_UnitFBStep;
	Walking::GetInstance()->X_MOVE_AMPLITUDE = m_FBStep;

	if(m_RLTurn > 0 && m_GoalRLTurn < 0)
		m_RLTurn = 0;
	else if(m_RLTurn < 0 && m_GoalRLTurn > 0)
		m_RLTurn = 0;

	if(m_RLTurn < m_GoalRLTurn)
		m_RLTurn += m_UnitRLTurn;
	else if(m_RLTurn > m_GoalRLTurn)
		m_RLTurn -= m_UnitRLTurn;

	Walking::GetInstance()->A_MOVE_AMPLITUDE = m_RLTurn;

	Walking::GetInstance()->Y_MOVE_AMPLITUDE = m_GoalRLStep;


	CountMaxTurnBall -= Walking::GetInstance()->Get_A_Moved() * 180 / PI;

}

void BallFollower::ProcessGoback(Point2D ball_pos, int CompassError)
{
	if(ball_pos.X == -1 || ball_pos.Y == -1)
	{
		if(Behavior::GetInstance()->get_goback_state() == CHECK_COMPASS)
		{
			Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;
			Walking::GetInstance()->X_MOVE_AMPLITUDE = 0;
			Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;
			MaxBallTurn = 0;
			CountMaxTurnBall = 0;
			return;
//		MaxBallTurn = CompassError;		
		}
		else if(Behavior::GetInstance()->get_goback_state() == TURNING)
		{
			MaxBallTurn = -CompassError;
			printf("MaxBallTurn = %lf\n", MaxBallTurn);
			if(abs(CompassError*360/255) < 170)
			{
				Walking::GetInstance()->A_MOVE_AMPLITUDE = -MaxBallTurn * 30 / (abs(MaxBallTurn));
				Walking::GetInstance()->X_MOVE_AMPLITUDE = 0;
				Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;
			}
			else
			{
				CountMaxTurnBall = 0;
				MaxBallTurn = 0;
				Behavior::GetInstance()->goback_check_own_goal();
//			Behavior::GetInstance()->goback_searching();
			}
			CountMaxTurnBall += Walking::GetInstance()->Get_A_Moved() * 180/PI;
		}
		else if(Behavior::GetInstance()->get_goback_state() == CHECK_OWN_GOAL)
		{
			Walking::GetInstance()->Stop();
			Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;
			Walking::GetInstance()->X_MOVE_AMPLITUDE = 0;
			Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;
		}
		else if(Behavior::GetInstance()->get_goback_state() == SEARCHING)
		{
			EdgeOfField = CompassError;
			ProcessSearchingBall();
			Walking::GetInstance()->A_MOVE_AMPLITUDE = m_GoalRLTurn;
			Walking::GetInstance()->X_MOVE_AMPLITUDE = m_GoalFBStep;
			Walking::GetInstance()->Y_MOVE_AMPLITUDE = m_GoalRLStep;
		}
		else if(Behavior::GetInstance()->get_goback_state() == GOING_BACK)
		{
			MaxBallTurn = 2000;
			printf("EdgeOfField = %d\t", CompassError);
			printf("CountMaxTurnBall = %d\n", CountMaxTurnBall);
			if(CompassError == 1 || CountMaxTurnBall >= MaxBallTurn)//edge of field = true;
			{
				EdgeOfField = CompassError;
				CountMaxTurnBall = MaxBallTurn;
				Behavior::GetInstance()->goback_searching();
				ProcessSearchingBall();
				Walking::GetInstance()->A_MOVE_AMPLITUDE = m_GoalRLTurn;
				Walking::GetInstance()->X_MOVE_AMPLITUDE = m_GoalFBStep;
				Walking::GetInstance()->Y_MOVE_AMPLITUDE = m_GoalRLStep;
				return;
			}
			else if(CountMaxTurnBall < MaxBallTurn)
			{
				Walking::GetInstance()->A_MOVE_AMPLITUDE = 0;
				Walking::GetInstance()->X_MOVE_AMPLITUDE = 20;
				Walking::GetInstance()->Y_MOVE_AMPLITUDE = 0;
			}
			CountMaxTurnBall += Walking::GetInstance()->Get_X_Moved();
		}
	}
	else//kalo bola ketemu
	{
		X_Moved = 0;
		CountMaxTurnBall = 0;
		MaxBallTurn = 0;
		LostCounter = 0;
		Behavior::GetInstance()->set_normal_state();
	}
}
